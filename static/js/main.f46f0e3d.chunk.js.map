{"version":3,"sources":["components/DigimonCard.tsx","Data/Objects.ts","Data/Database.ts","Data/index.ts","Data/Populate.ts","routes/Home/index.tsx","components/MoveCard.tsx","routes/Digimon/index.tsx","routes/index.tsx","components/Header.tsx","services/Notification.ts","components/NotificationBay.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["DigimonCard","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","digimon","link","size","nameless","react_default","a","createElement","dist","as","undefined","href","concat","id","className","style","margin","maxWidth","src","image","alt","position","left","right","bottom","backgroundColor","textOverflow","overflow","whiteSpace","name","PureComponent","defaultProps","Digimon","stage","type","attribute","memory","slots","sprite","support_skill_id","digivolveTo","digivolveFrom","moves","supportSkill","stats","assign","_join","asyncToGenerator","regenerator_default","mark","_callee","_ref","_ref2","support_skill","digivolveToData","digivolveFromData","movelearns","_ref3","_ref4","moveMap","digivolveToMap","digivolveFromMap","wrap","_context","prev","next","Promise","all","db","supports","get","digivolve","where","equals","toArray","movelearn","sortBy","sent","slicedToArray","anyOf","map","_ref5","move_id","_ref6","to","_ref7","from","reduce","move","level","digi","require","ret","stop","Move","sp_cost","power","inheritable","description","Support","_Dexie","Database","_this","call","autoOpen","version","stores","table","mapToClass","assertThisInitialized","on","console","log","bulkPut","data","e","Dexie","Home","_Component","_getPrototypeOf2","_len","length","args","Array","_key","state","onChange","setState","target","_componentDidMount","delete","display","flexDirection","flexWrap","justifyContent","filter","toLocaleLowerCase","includes","DigimonCard_DigimonCard","Component","AttrMap","Neutral","Plant","Light","Water","Wind","Dark","Earth","Fire","Electric","MoveCard","Header","Title","Icon","Content","Footer","Item","paddingRight","_this2","parseInt","match","params","join","then","_componentWillReceiveProps","_callee2","_this3","_context2","abrupt","_x","_this4","_this$state","Left","textDecorationLine","onClick","changeStat","hp","sp","atk","def","int","spd","MoveCard_MoveCard","Routes","Route","path","exact","component","_React$Component","menu","Brand","Burger","Menu","Start","React","NotificationService","_notify","text","values","subscribers","forEach","sub","nextID","NotificationBay","_React$PureComponent","notes","destroy","slice","subscribe","note","i","App","overrides","primary","HashRouter","minHeight","Header_Header","routes_Routes","NotificationBay_NotificationBay","body","document","querySelector","classList","add","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","notify","onUpdate","onSuccess","catch","error","ReactDOM","render","app","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"ukhVAcaA,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAIW,IAAAC,EACmCT,KAAKU,MAAvCC,EADDF,EACCE,QAASC,EADVH,EACUG,KAAMC,EADhBJ,EACgBI,KAAMC,EADtBL,EACsBK,SAC7B,OACEC,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKC,GAAIP,EAAO,SAAMQ,EAAWC,KAAI,aAAAC,OAAeX,EAAQY,IAAMC,UAAU,wDAAwDC,MAAO,CAACC,OAAQ,EAAGC,SAAUd,IAC/JE,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOM,UAAS,MAAAF,OAAQT,EAAR,KAAAS,OAAgBT,IAC9BE,EAAAC,EAAAC,cAAA,OAAKW,IAAKjB,EAAQkB,MAAOC,IAAI,aAC3BhB,GACAC,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CACRM,SAAU,WACVC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,gBAAiB,uBACjBC,aAAc,WACdC,SAAU,SACVC,WAAY,UACXd,UAAU,8CACZb,EAAQ4B,YArBvB3C,EAAA,CAAiC4C,iBAApB5C,EACJ6C,aAAe,CACpB5B,KAAM,gCCGG6B,EAAb,WAmBE,SAAAA,EAAY/B,GAAoBb,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAAA1C,KAlBhCuB,QAkB+B,EAAAvB,KAjB/BuC,UAiB+B,EAAAvC,KAhB/B2C,WAgB+B,EAAA3C,KAf/B4C,UAe+B,EAAA5C,KAd/B6C,eAc+B,EAAA7C,KAb/B8C,YAa+B,EAAA9C,KAZ/B+C,WAY+B,EAAA/C,KAX/B6B,WAW+B,EAAA7B,KAV/BgD,YAU+B,EAAAhD,KAT/BiD,sBAS+B,EAAAjD,KAR/BkD,YAAgC,GAQDlD,KAP/BmD,cAAkC,GAOHnD,KAN/BoD,WAM+B,EAAApD,KAL/BqD,kBAK+B,EAAArD,KAJ/BsD,WAI+B,EAC7BxD,OAAOyD,OAAOvD,KAAMW,GApBxB,OAAAb,OAAAQ,EAAA,EAAAR,CAAA4C,EAAA,EAAAnC,IAAA,OAAAC,MAAA,eAAAgD,EAAA1D,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAA1C,EAAA2C,KAAA,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAhB,EAAAF,EAAAC,EAAAkB,EAAAC,EAAAC,EAAA,OAAAb,EAAA1C,EAAAwD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EA6BcC,QAAQC,IAAI,CACpBC,EAAGC,SAASC,IAAIhF,KAAKiD,kBACrB6B,EAAGG,UAAUC,MAAM,QAAQC,OAAOnF,KAAKuB,IAAI6D,UAC3CN,EAAGG,UAAUC,MAAM,MAAMC,OAAOnF,KAAKuB,IAAI6D,UACzCN,EAAGO,UAAUH,MAAM,cAAcC,OAAOnF,KAAKuB,IAAI+D,OAAO,WAjC9D,cAAAzB,EAAAY,EAAAc,KAAAzB,EAAAhE,OAAA0F,EAAA,EAAA1F,CAAA+D,EAAA,GAyBME,EAzBND,EAAA,GA0BME,EA1BNF,EAAA,GA2BMG,EA3BNH,EAAA,GA4BMI,EA5BNJ,EAAA,GAmCI9D,KAAKqD,aAAeU,EAnCxBU,EAAAE,KAAA,GAyCcC,QAAQC,IAAI,CACpBC,EAAG1B,MAAM8B,MAAM,MAAMO,MAAMvB,EAAWwB,IAAI,SAAAC,GAAA,OAAAA,EAAGC,WAAwBR,UACrEN,EAAGnE,QAAQuE,MAAM,MAAMO,MAAMzB,EAAgB0B,IAAI,SAAAG,GAAA,OAAAA,EAAGC,MAAcV,UAClEN,EAAGnE,QAAQuE,MAAM,MAAMO,MAAMxB,EAAkByB,IAAI,SAAAK,GAAA,OAAAA,EAAGC,QAAkBZ,YA5C9E,QAAAjB,EAAAM,EAAAc,KAAAnB,EAAAtE,OAAA0F,EAAA,EAAA1F,CAAAqE,EAAA,GAsCMf,EAtCNgB,EAAA,GAuCMlB,EAvCNkB,EAAA,GAwCMjB,EAxCNiB,EAAA,GA+CUC,EAAUjB,EAAM6C,OAAO,SAACP,EAAKQ,GAEjC,OADAR,EAAIQ,EAAK3E,IAAM2E,EACRR,GACN,IACH1F,KAAKoD,MAAQc,EAAWwB,IAAI,SAACL,GAC3B,MAAO,CACLa,KAAM7B,EAAQgB,EAAUO,SACxBO,MAAOd,EAAUc,SAIf7B,EAAiBN,EAAgBiC,OAAO,SAACP,EAAKU,GAKlD,OAJAV,EAAIU,EAAKN,IAAM,CACbK,MAAOC,EAAKD,MACZE,QAASD,EAAKC,SAETX,GACN,IACH1F,KAAKkD,YAAcA,EAAYwC,IAAI,SAACU,GAClC,IAAME,EAAMhC,EAAe8B,EAAK7E,IAChC,MAAO,CACL4E,MAAOG,EAAIH,MACXE,QAASC,EAAID,QACb1F,QAASyF,KAIP7B,EAAmBN,EAAkBgC,OAAO,SAACP,EAAKU,GAKtD,OAJAV,EAAIU,EAAKJ,MAAQ,CACfG,MAAOC,EAAKD,MACZE,QAASD,EAAKC,SAETX,GACN,IACH1F,KAAKmD,cAAgBA,EAAcuC,IAAI,SAACU,GACtC,IAAME,EAAM/B,EAAiB6B,EAAK7E,IAClC,MAAO,CACL4E,MAAOG,EAAIH,MACXE,QAASC,EAAID,QACb1F,QAASyF,KAtFjB,yBAAA3B,EAAA8B,SAAA3C,EAAA5D,SAAA,yBAAAwD,EAAArD,MAAAH,KAAAI,YAAA,MAAAsC,EAAA,GAiHa8D,EAAb,SAAAA,IAAA1G,OAAAC,EAAA,EAAAD,CAAAE,KAAAwG,GAAAxG,KACEuB,QADF,EAAAvB,KAEEuC,UAFF,EAAAvC,KAGEyG,aAHF,EAAAzG,KAIE4C,UAJF,EAAA5C,KAKE0G,WALF,EAAA1G,KAME6C,eANF,EAAA7C,KAOE2G,iBAPF,EAAA3G,KAQE4G,iBARF,GAWaC,EAAb,SAAAA,IAAA/G,OAAAC,EAAA,EAAAD,CAAAE,KAAA6G,GAAA7G,KACEuB,QADF,EAAAvB,KAEEuC,UAFF,EAAAvC,KAGE4G,iBAHF,WC1IO,ICHM9B,EAAK,IDGlB,SAAAgC,GAOE,SAAAC,IAAc,IAAAC,EERSlC,EFQT,OAAAhF,OAAAC,EAAA,EAAAD,CAAAE,KAAA+G,IACZC,EAAAlH,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiH,GAAAE,KAAAjH,KAAM,SAAU,CAAEkH,UAAU,MAP9BvG,aAMc,EAAAqG,EALd5D,WAKc,EAAA4D,EAJdjC,cAIc,EAAAiC,EAHd3B,eAGc,EAAA2B,EAFd/B,eAEc,EAEZ+B,EAAKG,QAAQ,GAAGC,OAAO,CACrBzG,QAAO,8DAEPyC,MAAO,sEACP2B,SAAU,wBACVM,UAAW,wDACXJ,UAAW,mCAGb+B,EAAKK,MAAM,WAAWC,WAAW5E,GACjCsE,EAAKK,MAAM,SAASC,WAAWd,GAC/BQ,EAAKK,MAAM,YAAYC,WAAWT,GAElCG,EAAKrG,QAAUqG,EAAKK,MAAM,WAC1BL,EAAK5D,MAAQ4D,EAAKK,MAAM,SACxBL,EAAKjC,SAAWiC,EAAKK,MAAM,YAC3BL,EAAK3B,UAAY2B,EAAKK,MAAM,aAC5BL,EAAK/B,UAAY+B,EAAKK,MAAM,cE3BPvC,EF6BZhF,OAAAyH,EAAA,EAAAzH,QAAAyH,EAAA,EAAAzH,CAAAkH,KE5BRQ,GAAG,WAAY,WAChBC,QAAQC,IAAI,cACZ,IACE5C,EAAGnE,QAAQgH,QAAQC,EAAKjH,QAAQ+E,IAAI,SAACU,GAAD,OAAU,IAAI1D,EAAQ0D,MAC1DtB,EAAG1B,MAAMuE,QAAQC,EAAKxE,OACtB0B,EAAGC,SAAS4C,QAAQC,EAAK7C,UACzBD,EAAGO,UAAUsC,QAAQC,EAAKvC,WAC1BP,EAAGG,UAAU0C,QAAQC,EAAK3C,WAC1B,MAAO4C,GACPJ,QAAQC,IAAIG,GAEdJ,QAAQC,IAAI,qBFJAV,EAPhB,OAAAlH,OAAAO,EAAA,EAAAP,CAAAiH,EAAAD,GAAAC,EAAA,CAA8Be,MGOjBC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAjB,EAAAlH,OAAAC,EAAA,EAAAD,CAAAE,KAAA+H,GAAA,QAAAG,EAAA9H,UAAA+H,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlI,UAAAkI,GAAA,OAAAtB,EAAAlH,OAAAG,EAAA,EAAAH,CAAAE,MAAAiI,EAAAnI,OAAAI,EAAA,EAAAJ,CAAAiI,IAAAd,KAAA9G,MAAA8H,EAAA,CAAAjI,MAAAsB,OAAA8G,MACEG,MAAQ,CACN5H,QAAS,GACT4B,KAAM,IAHVyE,EAYEwB,SAAW,SAACX,GACVb,EAAKyB,SAAS,CAAElG,KAAMsF,EAAEa,OAAOlI,SAbnCwG,EAAA,OAAAlH,OAAAO,EAAA,EAAAP,CAAAiI,EAAAC,GAAAlI,OAAAQ,EAAA,EAAAR,CAAAiI,EAAA,EAAAxH,IAAA,oBAAAC,MAAA,eAAAmI,EAAA7I,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAA1C,EAAA2C,KAAA,SAAAC,IAAA,OAAAF,EAAA1C,EAAAwD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAOUG,EAAG8D,SAPb,wBAAAnE,EAAA8B,SAAA3C,EAAA5D,SAAA,yBAAA2I,EAAAxI,MAAAH,KAAAI,YAAA,KAAAG,IAAA,SAAAC,MAAA,WAgBW,IACC+B,EAASvC,KAAKuI,MAAdhG,KACR,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOsH,SAAUxI,KAAKwI,WACtBzH,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEoH,QAAS,OAAQC,cAAe,MAAOC,SAAU,OAAQC,eAAgB,WACpFhJ,KAAKuI,MAAM5H,QAAQsI,OAAO,SAACtI,GAAD,OAAa4B,GAAO5B,EAAQ4B,KAAK2G,oBAAoBC,SAAS5G,KAAcmD,IAAI,SAAC/E,GAAD,OACzGI,EAAAC,EAAAC,cAACmI,EAAD,CACExI,MAAI,EACJL,IAAKI,EAAQY,GACbZ,QAASA,YA1BvBoH,EAAA,CAA0BsB,aCCpBC,EAAsC,CAC1CC,QAAS,mCACTC,MAAO,mCACPC,MAAO,mCACPC,MAAO,kCACPC,KAAM,mCACNC,KAAM,kCACNC,MAAO,sCACPC,KAAM,iCACNC,SAAU,qCAICC,EAAb,SAAAnK,GAAA,SAAAmK,IAAA,OAAAlK,OAAAC,EAAA,EAAAD,CAAAE,KAAAgK,GAAAlK,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkK,GAAA7J,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAkK,EAAAnK,GAAAC,OAAAQ,EAAA,EAAAR,CAAAkK,EAAA,EAAAzJ,IAAA,SAAAC,MAAA,WAEW,IAAAC,EACiBT,KAAKU,MAArBwF,EADDzF,EACCyF,KAAMC,EADP1F,EACO0F,MACd,OACEpF,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,KAAK+I,OAAN,CAAazI,UAAU,0BACrBT,EAAAC,EAAAC,cAACC,EAAA,KAAK+I,OAAOC,MAAb,KAAoBhE,EAAK3D,MACzBxB,EAAAC,EAAAC,cAACC,EAAA,KAAK+I,OAAOE,KAAb,YACOhE,IAGTpF,EAAAC,EAAAC,cAACC,EAAA,KAAKkJ,QAAN,KACErJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAAA,KAAGO,UAAW8H,EAAQpD,EAAKrD,cAE7B9B,EAAAC,EAAAC,cAAA,YAAOiF,EAAKU,eAGhB7F,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAN,CAAa7I,UAAU,aACrBT,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAOC,KAAb,KACEvJ,EAAAC,EAAAC,cAAA,UAAQQ,MAAO,CAAC8I,aAAc,IAA9B,WADF,IACsDrE,EAAKQ,OAE3D3F,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAOC,KAAb,KACEvJ,EAAAC,EAAAC,cAAA,UAAQQ,MAAO,CAAC8I,aAAc,IAA9B,UADF,IACqDrE,EAAKO,SAE1D1F,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAOC,KAAb,KACEvJ,EAAAC,EAAAC,cAAA,UAAQQ,MAAO,CAAC8I,aAAc,IAA9B,aADF,IACwDrE,EAAKS,mBA5BvEqD,EAAA,CAA8BxH,iBCLjBE,EAAb,SAAAsF,GAAA,SAAAtF,IAAA,IAAAuF,EAAAjB,EAAAlH,OAAAC,EAAA,EAAAD,CAAAE,KAAA0C,GAAA,QAAAwF,EAAA9H,UAAA+H,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlI,UAAAkI,GAAA,OAAAtB,EAAAlH,OAAAG,EAAA,EAAAH,CAAAE,MAAAiI,EAAAnI,OAAAI,EAAA,EAAAJ,CAAA4C,IAAAuE,KAAA9G,MAAA8H,EAAA,CAAAjI,MAAAsB,OAAA8G,MACEG,MAAe,GADjBvB,EAAA,OAAAlH,OAAAO,EAAA,EAAAP,CAAA4C,EAAAsF,GAAAlI,OAAAQ,EAAA,EAAAR,CAAA4C,EAAA,EAAAnC,IAAA,oBAAAC,MAAA,eAAAmI,EAAA7I,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAA1C,EAAA2C,KAAA,SAAAC,IAAA,IAAAjD,EAAA6J,EAAAxK,KAAA,OAAA0D,EAAA1C,EAAAwD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAI0BG,EAAGnE,QAAQqE,IAAIyF,SAASzK,KAAKU,MAAMgK,MAAMC,OAAOpJ,KAJ1E,QAIUZ,EAJV8D,EAAAc,OAMM5E,EAAQiK,OAAOC,KAAK,WAClBL,EAAK/B,SAAS,CAAE9H,cAGpBX,KAAKyI,SAAS,CAAE9H,YAVpB,wBAAA8D,EAAA8B,SAAA3C,EAAA5D,SAAA,yBAAA2I,EAAAxI,MAAAH,KAAAI,YAAA,KAAAG,IAAA,4BAAAC,MAAA,eAAAsK,EAAAhL,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAA1C,EAAA2C,KAAA,SAAAoH,EAakCrK,GAblC,IAAAC,EAAAqK,EAAAhL,KAAA,OAAA0D,EAAA1C,EAAAwD,KAAA,SAAAyG,GAAA,cAAAA,EAAAvG,KAAAuG,EAAAtG,MAAA,UAcQ3E,KAAKU,MAAMgK,MAAMC,OAAOpJ,KAAOb,EAAMgK,MAAMC,OAAOpJ,GAd1D,CAAA0J,EAAAtG,KAAA,eAAAsG,EAAAC,OAAA,wBAAAD,EAAAtG,KAAA,EAe0BG,EAAGnE,QAAQqE,IAAIyF,SAAS/J,EAAMgK,MAAMC,OAAOpJ,KAfrE,QAeUZ,EAfVsK,EAAA1F,OAiBM5E,EAAQiK,OAAOC,KAAK,WAClBG,EAAKvC,SAAS,CAAE9H,cAGpBX,KAAKyI,SAAS,CAAE9H,YArBpB,wBAAAsK,EAAA1E,SAAAwE,EAAA/K,SAAA,gBAAAmL,GAAA,OAAAL,EAAA3K,MAAAH,KAAAI,YAAA,KAAAG,IAAA,aAAAC,MAAA,SAwBa2F,GAAe,IAAAiF,EAAApL,KACxB,OAAO,kBAAMoL,EAAK3C,SAAS,CAAEnF,MAAO8H,EAAK7C,MAAMjF,QAAU6C,OAAQ/E,EAAY+E,OAzBjF,CAAA5F,IAAA,SAAAC,MAAA,WA4BW,IAAA6K,EACoBrL,KAAKuI,MAAxB5H,EADD0K,EACC1K,QAAS2C,EADV+H,EACU/H,MACjB,OAAK3C,EAEHI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,KAAK+I,OAAN,CAAazI,UAAU,0BACrBT,EAAAC,EAAAC,cAACC,EAAA,KAAK+I,OAAOC,MAAb,KACGvJ,EAAQ4B,MAEXxB,EAAAC,EAAAC,cAACC,EAAA,KAAK+I,OAAOE,KAAb,KACGxJ,EAAQgC,QAGb5B,EAAAC,EAAAC,cAACC,EAAA,KAAKkJ,QAAN,KACErJ,EAAAC,EAAAC,cAACC,EAAA,MAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,MAAMoK,KAAP,CAAYnK,GAAG,UACbJ,EAAAC,EAAAC,cAACmI,EAAD,CACEtI,UAAQ,EACRH,QAASA,KAGbI,EAAAC,EAAAC,cAACC,EAAA,MAAMkJ,QAAP,KACErJ,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,wBADF,IAC2BN,EAAQiC,KACjC7B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6BAHF,IAGgCN,EAAQkC,UACtC9B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,0BALF,IAK6BN,EAAQmC,OACnC/B,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,yBAPF,IAO4BN,EAAQoC,UAKzCpC,EAAQ0C,cACPtC,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAAA,QAAMQ,MAAO,CAAE8J,mBAAoB,cACjCxK,EAAAC,EAAAC,cAAA,iCADF,IACoCN,EAAQ0C,aAAad,MAEzDxB,EAAAC,EAAAC,cAAA,WACCN,EAAQ0C,aAAauD,cAI5B7F,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAN,KACEtJ,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAOC,KAAb,CAAkBnJ,GAAG,IAAIqK,QAASxL,KAAKyL,WAAW,OAAlD,UACA1K,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAOC,KAAb,CAAkBnJ,GAAG,IAAIqK,QAASxL,KAAKyL,WAAW,OAAlD,UACA1K,EAAAC,EAAAC,cAACC,EAAA,KAAKmJ,OAAOC,KAAb,CAAkBnJ,GAAG,IAAIqK,QAASxL,KAAKyL,WAAW,OAAlD,YAGHnI,GACCvC,EAAAC,EAAAC,cAACC,EAAA,KAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,KAAKkJ,QAAN,CAAc5I,UAAU,kBACtBT,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOM,UAAU,sCACfT,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,gBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,mBAGJF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKN,EAAQ2C,MAAMA,GAAOoI,IAC1B3K,EAAAC,EAAAC,cAAA,UAAKN,EAAQ2C,MAAMA,GAAOqI,IAC1B5K,EAAAC,EAAAC,cAAA,UAAKN,EAAQ2C,MAAMA,GAAOsI,KAC1B7K,EAAAC,EAAAC,cAAA,UAAKN,EAAQ2C,MAAMA,GAAOuI,KAC1B9K,EAAAC,EAAAC,cAAA,UAAKN,EAAQ2C,MAAMA,GAAOwI,KAC1B/K,EAAAC,EAAAC,cAAA,UAAKN,EAAQ2C,MAAMA,GAAOyI,UAOtChL,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKM,UAAU,6BACbT,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOM,UAAU,4BACfT,EAAAC,EAAAC,cAAA,SAAOO,UAAU,0BACfT,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBAGJF,EAAAC,EAAAC,cAAA,aACGN,EAAQwC,eAAiBxC,EAAQwC,cAAcuC,IAAI,SAACkC,GAAD,OAClD7G,EAAAC,EAAAC,cAAA,MAAIV,IAAKqH,EAAKjH,QAAQY,IACpBR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmI,EAAD,CAAaxI,MAAI,EAACD,QAASiH,EAAKjH,WAElCI,EAAAC,EAAAC,cAAA,UAAK2G,EAAKzB,OACVpF,EAAAC,EAAAC,cAAA,UAAK2G,EAAKvB,eAMpBtF,EAAAC,EAAAC,cAACC,EAAA,IAAD,CAAKM,UAAU,6BACbT,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOM,UAAU,4BACfT,EAAAC,EAAAC,cAAA,SAAOO,UAAU,0BACfT,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,wBAGJF,EAAAC,EAAAC,cAAA,aACGN,EAAQuC,aAAevC,EAAQuC,YAAYwC,IAAI,SAACkC,GAAD,OAC9C7G,EAAAC,EAAAC,cAAA,MAAIV,IAAKqH,EAAKjH,QAAQY,IACpBR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmI,EAAD,CAAaxI,MAAI,EAACD,QAASiH,EAAKjH,WAElCI,EAAAC,EAAAC,cAAA,UAAK2G,EAAKzB,OACVpF,EAAAC,EAAAC,cAAA,UAAK2G,EAAKvB,eAMnB1F,EAAQyC,OAASzC,EAAQyC,MAAMsC,IAAI,SAACkC,GAAD,OAClC7G,EAAAC,EAAAC,cAAC+K,EAAD,CAAUzL,IAAKqH,EAAK1B,KAAK3E,GAAI2E,KAAM0B,EAAK1B,KAAMC,MAAOyB,EAAKzB,WA5H3C,SA9BzBzD,EAAA,CAA6B2G,aCfhB4C,EAAb,SAAAjE,GAAA,SAAAiE,IAAA,OAAAnM,OAAAC,EAAA,EAAAD,CAAAE,KAAAiM,GAAAnM,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmM,GAAA9L,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAmM,EAAAjE,GAAAlI,OAAAQ,EAAA,EAAAR,CAAAmM,EAAA,EAAA1L,IAAA,SAAAC,MAAA,WAEI,OACEO,EAAAC,EAAAC,cAACC,EAAA,QAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,UAAD,KACEH,EAAAC,EAAAC,cAACiL,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWtE,IACjChH,EAAAC,EAAAC,cAACiL,EAAA,EAAD,CAAOC,KAAK,eAAeC,OAAK,EAACC,UAAW3J,UANtDuJ,EAAA,CAA4B5C,aCIfY,EAAb,SAAAqC,GAAA,SAAArC,IAAA,IAAAhC,EAAAjB,EAAAlH,OAAAC,EAAA,EAAAD,CAAAE,KAAAiK,GAAA,QAAA/B,EAAA9H,UAAA+H,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlI,UAAAkI,GAAA,OAAAtB,EAAAlH,OAAAG,EAAA,EAAAH,CAAAE,MAAAiI,EAAAnI,OAAAI,EAAA,EAAAJ,CAAAmK,IAAAhD,KAAA9G,MAAA8H,EAAA,CAAAjI,MAAAsB,OAAA8G,MACEG,MAAe,CACbgE,MAAM,GAFVvF,EAAA,OAAAlH,OAAAO,EAAA,EAAAP,CAAAmK,EAAAqC,GAAAxM,OAAAQ,EAAA,EAAAR,CAAAmK,EAAA,EAAA1J,IAAA,SAAAC,MAAA,WAIW,IAAAgK,EAAAxK,KACCuM,EAASvM,KAAKuI,MAAdgE,KACR,OACExL,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQM,UAAU,2BAChBT,EAAAC,EAAAC,cAACC,EAAA,OAAOsL,MAAR,KACEzL,EAAAC,EAAAC,cAACC,EAAA,OAAOoJ,KAAR,eACAvJ,EAAAC,EAAAC,cAACC,EAAA,OAAOuL,OAAR,CAAejB,QAAS,kBAAMhB,EAAK/B,SAAS,CAAE8D,MAAOA,KAAS/K,UAAW+K,EAAO,iBAAcnL,GAC5FL,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,eAGJF,EAAAC,EAAAC,cAACC,EAAA,OAAOwL,KAAR,CAAalL,UAAW+K,EAAO,iBAAcnL,GAC3CL,EAAAC,EAAAC,cAACC,EAAA,OAAOyL,MAAR,KACE5L,EAAAC,EAAAC,cAACC,EAAA,OAAOoJ,KAAR,CAAanJ,GAAG,IAAIE,KAAK,MAAzB,eAlBZ4I,EAAA,CAA4B2C,IAAMvD,WCPrBwD,EAAb,oBAAAA,IAAA/M,OAAAC,EAAA,EAAAD,CAAAE,KAAA6M,GAAA,OAAA/M,OAAAQ,EAAA,EAAAR,CAAA+M,EAAA,OAAAtM,IAAA,SAAAC,MAAA,eAAAsM,EAAAhN,OAAA2D,EAAA,EAAA3D,CAAA4D,EAAA1C,EAAA2C,KAAA,SAAAC,EAIsBmJ,GAJtB,OAAArJ,EAAA1C,EAAAwD,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAKI7E,OAAOkN,OAAOhN,KAAKiN,aAAaC,QAAQ,SAACC,GAAD,OAASA,EAAIJ,KALzD,wBAAAtI,EAAA8B,SAAA3C,EAAA5D,SAAA,gBAAAmL,GAAA,OAAA2B,EAAA3M,MAAAH,KAAAI,YAAA,KAAAG,IAAA,YAAAC,MAAA,SAQmB2M,GAAiB,IAAAnG,EAAAhH,KAC1BuB,EAAKvB,KAAKoN,SAEhB,OADApN,KAAKiN,YAAY1L,GAAM4L,EAChB,kBACEnG,EAAKiG,YAAY1L,QAZ9BsL,EAAA,GAAaA,EACII,YAA2C,GAD/CJ,EAEIO,OAAiB,ECG3B,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAApF,EAAAjB,EAAAlH,OAAAC,EAAA,EAAAD,CAAAE,KAAAqN,GAAA,QAAAnF,EAAA9H,UAAA+H,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlI,UAAAkI,GAAA,OAAAtB,EAAAlH,OAAAG,EAAA,EAAAH,CAAAE,MAAAiI,EAAAnI,OAAAI,EAAA,EAAAJ,CAAAuN,IAAApG,KAAA9G,MAAA8H,EAAA,CAAAjI,MAAAsB,OAAA8G,MACEG,MAAe,CACbgF,MAAO,IAFXvG,EAKEwG,QAAU,WACRxG,EAAKyB,SAAS,CACZ8E,MAAOvG,EAAKuB,MAAMgF,MAAME,MAAM,EAAGzG,EAAKuB,MAAMgF,MAAMpF,OAAS,MAPjEnB,EAAA,OAAAlH,OAAAO,EAAA,EAAAP,CAAAuN,EAAAC,GAAAxN,OAAAQ,EAAA,EAAAR,CAAAuN,EAAA,EAAA9M,IAAA,oBAAAC,MAAA,WAWsB,IAAAgK,EAAAxK,KAClB6M,EAAoBa,UAAU,SAACX,GAC7BvC,EAAK/B,SAAS,CACZ8E,MAAO/C,EAAKjC,MAAMgF,MAAMjM,OAAOyL,SAdvC,CAAAxM,IAAA,SAAAC,MAAA,WAmBW,IAAAwK,EAAAhL,KACP,OACEe,EAAAC,EAAAC,cAAA,OAAKQ,MAAO,CAAEM,SAAU,QAASE,MAAO,GAAID,KAAM,GAAIE,OAAQ,KAC3DlC,KAAKuI,MAAMgF,MAAM7H,IAAI,SAACiI,EAAMC,GAAP,OACpB7M,EAAAC,EAAAC,cAACC,EAAA,aAAD,CACEX,IAAKqN,EACLpM,UAAU,oBACVgK,QAASR,EAAKwC,SACdG,UA3BZN,EAAA,CAAqCT,IAAMpK,eCKrCqL,mLAEF,OACE9M,EAAAC,EAAAC,cAACC,EAAA,iBAAD,CAAkB4M,UAAW,CAAEC,QAAS,SACtChN,EAAAC,EAAAC,cAAC+M,EAAA,EAAD,KACEjN,EAAAC,EAAAC,cAAA,OAAKO,UAAU,4BAA4BC,MAAO,CAAEwM,UAAW,UAC7DlN,EAAAC,EAAAC,cAACiN,EAAD,MACAnN,EAAAC,EAAAC,cAACkN,EAAD,MACApN,EAAAC,EAAAC,cAACmN,EAAD,gBARM/E,aAgBZgF,EAAOC,SAASC,cAAc,QACpCF,GAAQA,EAAKG,UAAUC,IAAI,wBAEZZ,QCnBTa,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASpE,MACvB,2DA8CN,SAASqE,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTnE,KAAK,SAAAwE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBhH,QACf2G,UAAUC,cAAcO,YAI1B7C,EAAoB8C,OAClB,qFAIEV,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBxC,EAAoB8C,OAClB,yCAIEV,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BS,MAAM,SAAAC,GACLtI,QAAQsI,MAAM,4CAA6CA,KCrGjEC,IAASC,OAAOlP,EAAAC,EAAAC,cAACiP,EAAD,MAAS5B,SAAS6B,eAAe,SDuB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACnBC,WACDzB,OAAOC,SAASxN,MAEJiP,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAA1N,OAAM+O,WAAN,sBAEP3B,GAiEV,SAAiCM,EAAeC,GAE9CuB,MAAMxB,GACHnE,KAAK,SAAA4F,GAEJ,IAAMC,EAAcD,EAASE,QAAQ3L,IAAI,gBAEnB,MAApByL,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMjG,KAAK,SAAAwE,GACjCA,EAAa0B,aAAalG,KAAK,WAC7B+D,OAAOC,SAASmC,aAKpBjC,EAAgBC,EAAOC,KAG1Ba,MAAM,WACLjD,EAAoB8C,OAClB,qCAtFAsB,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMjG,KAAK,WACjCpD,QAAQC,IACN,+GAMJqH,EAAgBC,EAAOC,MCjD/BE","file":"static/js/main.f46f0e3d.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Box, Image } from 'bulma-styled-components'\n\ntype Props = {\n  digimon: {\n    id: number,\n    name: string,\n    image: string,\n  },\n  size?: 16 | 24 | 32 | 48 | 64 | 96 | 128,\n  link?: boolean\n  nameless?: boolean\n}\n\nexport class DigimonCard extends PureComponent<Props> {\n  static defaultProps = {\n    size: 96\n  }\n  render() {\n    const { digimon, link, size, nameless } = this.props\n    return  (\n      <Box as={link ? 'a' : undefined} href={`#/digimon/${digimon.id}`} className=\"is-paddingless has-background-grey-lighter is-clipped\" style={{margin: 5, maxWidth: size }} >\n        <Image className={`is-${size}x${size}`}>\n          <img src={digimon.image} alt=\"digimon\"/>\n          {!nameless && (\n            <div style={{\n                position: 'absolute',\n                left: 0,\n                right: 0,\n                bottom: 0,\n                backgroundColor: 'rgba(70, 70, 70, .7)',\n                textOverflow: 'ellipsis',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n              }} className=\"has-text-white has-text-centered is-size-7\" >\n              {digimon.name}\n            </div>\n          )}\n        </Image>\n      </Box>\n    )\n  }\n}","import { db } from './'\n\n\nexport interface IDigimon {\n  id: number;\n  name: string;\n  stage: string;\n  type: string;\n  attribute: string;\n  memory: number;\n  slots: number;\n  image: string;\n  sprite: string;\n  support_skill_id: number;\n  stats: {\n    [level: string]: IStats\n  };\n}\n\nexport class Digimon {\n  id: number;\n  name: string;\n  stage: string;\n  type: string;\n  attribute: string;\n  memory: number;\n  slots: number;\n  image: string;\n  sprite: string;\n  support_skill_id: number;\n  digivolveTo?: IDigivoleInfo[] = [];\n  digivolveFrom?: IDigivoleInfo[] = [];\n  moves?: IMoveInfo[];\n  supportSkill?: Support;\n  stats: {\n    [level: string]: IStats\n  };\n\n  constructor(digimon: IDigimon) {\n    Object.assign(this, digimon)\n  }\n\n  async join() {\n    const [\n      support_skill,\n      digivolveToData,\n      digivolveFromData,\n      movelearns\n    ] = await Promise.all([\n      db.supports.get(this.support_skill_id),\n      db.digivolve.where('from').equals(this.id).toArray(),\n      db.digivolve.where('to').equals(this.id).toArray(),\n      db.movelearn.where('digimon_id').equals(this.id).sortBy('level'),\n    ])\n    this.supportSkill = support_skill\n\n    const [\n      moves,\n      digivolveTo,\n      digivolveFrom\n    ] = await Promise.all([\n      db.moves.where('id').anyOf(movelearns.map(({ move_id }) => move_id)).toArray(),\n      db.digimon.where('id').anyOf(digivolveToData.map(({ to }) => to)).toArray(),\n      db.digimon.where('id').anyOf(digivolveFromData.map(({ from }) => from)).toArray(),\n    ])\n\n    const moveMap = moves.reduce((map, move) => {\n      map[move.id] = move\n      return map\n    }, {} as { [move_id: string]: Move })\n    this.moves = movelearns.map((movelearn) => {\n      return {\n        move: moveMap[movelearn.move_id],\n        level: movelearn.level\n      }\n    })\n\n    const digivolveToMap = digivolveToData.reduce((map, digi) => {\n      map[digi.to] = {\n        level: digi.level,\n        require: digi.require,\n      }\n      return map\n    }, {} as { [move_id: string]: {level:number, require:string} })\n    this.digivolveTo = digivolveTo.map((digi) => {\n      const ret = digivolveToMap[digi.id]\n      return {\n        level: ret.level,\n        require: ret.require,\n        digimon: digi\n      }\n    })\n\n    const digivolveFromMap = digivolveFromData.reduce((map, digi) => {\n      map[digi.from] = {\n        level: digi.level,\n        require: digi.require,\n      }\n      return map\n    }, {} as { [move_id: string]: {level:number, require:string} })\n    this.digivolveFrom = digivolveFrom.map((digi) => {\n      const ret = digivolveFromMap[digi.id]\n      return {\n        level: ret.level,\n        require: ret.require,\n        digimon: digi\n      }\n    })\n\n  }\n}\n\ninterface IDigivoleInfo {\n  level: number,\n  require: string,\n  digimon: Digimon,\n}\n\ninterface IMoveInfo {\n  level: number,\n  move: Move,\n}\n\nexport interface IStats {\n  hp: number,\n  sp: number,\n  atk: number,\n  def: number,\n  int: number,\n  spd: number\n}\n\nexport class Move {\n  id: number;\n  name: string;\n  sp_cost: number;\n  type: string;\n  power: number;\n  attribute: string;\n  inheritable: string;\n  description: string;\n}\n\nexport class Support {\n  id: number;\n  name: string;\n  description: string;\n}\n\nexport interface IMoveLearn {\n  digimon_id: number,\n  level: number,\n  move_id: number\n}\n\nexport interface IDigivolve {\n  from: number,\n  to: number,\n  level: number,\n  require: string\n}\n","import Dexie from 'dexie'\nimport { Digimon, Move, Support, IMoveLearn, IDigivolve } from './Objects'\nimport { populate } from './Populate';\n\n\nexport class Database extends Dexie {\n  digimon: Dexie.Table<Digimon, number>\n  moves: Dexie.Table<Move, number>\n  supports: Dexie.Table<Support, number>\n  movelearn: Dexie.Table<IMoveLearn, number>\n  digivolve: Dexie.Table<IDigivolve, number>\n\n  constructor() {\n    super('DigiDB', { autoOpen: true })\n    this.version(1).stores({\n      digimon: `id,&name,stage,type,attribute,memory,slots,support_skill_id`,\n      // ,stats.01.hp,stats.01.sp,stats.01.atk,stats.01.def,stats.01.int,stats.01.spd,stats.99.hp,stats.99.sp,stats.99.atk,stats.99.def,stats.99.int,stats.99.spd,stats.50.hp,stats.50.sp,stats.50.atk,stats.50.def,stats.50.int,stats.50.spd\n      moves: 'id, name, sp_cost, type, power, attribute, inheritable, description',\n      supports: 'id, name, description',\n      movelearn: '++, digimon_id, move_id, &[digimon_id+move_id], level',\n      digivolve: '++, from, to, [from+to], level',\n    })\n\n    this.table('digimon').mapToClass(Digimon)\n    this.table('moves').mapToClass(Move)\n    this.table('supports').mapToClass(Support)\n\n    this.digimon = this.table('digimon')\n    this.moves = this.table('moves')\n    this.supports = this.table('supports')\n    this.movelearn = this.table('movelearn')\n    this.digivolve = this.table('digivolve')\n\n    populate(this)\n  }\n\n}","import { Database } from './Database'\n\nexport const db = new Database()","import { Database } from './Database'\nimport data from './data.json'\nimport { Digimon } from './Objects';\n\nexport function populate(db: Database) {\n  db.on('populate', () => {\n    console.log('populating')\n    try {\n      db.digimon.bulkPut(data.digimon.map((digi) => new Digimon(digi)))\n      db.moves.bulkPut(data.moves)\n      db.supports.bulkPut(data.supports)\n      db.movelearn.bulkPut(data.movelearn)\n      db.digivolve.bulkPut(data.digivolve)\n    } catch (e) {\n      console.log(e)\n    }\n    console.log('population done')\n  })\n}\n","import React, { Component, FormEvent } from \"react\";\nimport { Input } from 'bulma-styled-components'\nimport { DigimonCard } from '../../components/DigimonCard'\nimport { db } from '../../Data'\nimport { Digimon } from '../../Data/Objects'\n\ntype State = {\n  digimon: Digimon[]\n  name: string\n}\n\n\nexport class Home extends Component<{},State> {\n  state = {\n    digimon: [] as Digimon[],\n    name: '',\n  }\n\n  async componentDidMount() {\n    await db.delete()\n    // const digimon = await db.digimon.toArray()\n    // this.setState({ digimon })\n  }\n\n  onChange = (e: any) => {\n    this.setState({ name: e.target.value })\n  }\n\n  render() {\n    const { name } = this.state\n    return (\n      <div>\n        <Input onChange={this.onChange}/>\n        <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'center' }}>\n          {this.state.digimon.filter((digimon) => name ? digimon.name.toLocaleLowerCase().includes(name) : true).map((digimon) => (\n            <DigimonCard\n              link\n              key={digimon.id}\n              digimon={digimon}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}","import React, { PureComponent } from \"react\";\nimport {\n  Card,\n  Content,\n  Icon,\n} from 'bulma-styled-components'\nimport { Move } from '../Data/Objects'\n\ntype Props = {\n  move: Move,\n  level?: number\n}\n\nconst AttrMap: { [type: string]: string } = {\n  Neutral: 'fas fa-lg fa-minus has-text-grey',\n  Plant: 'fas fa-lg fa-leaf has-text-green',\n  Light: 'fas fa-lg fa-sun has-text-yellow',\n  Water: 'fas fa-lg fa-tint has-text-info',\n  Wind: 'fas fa-lg fa-wind has-text-light',\n  Dark: 'fas fa-lg fa-moon has-text-dark',\n  Earth: 'fas fa-lg fa-mountain has-text-grey',\n  Fire: 'fas fa-lg fa-fire has-text-red',\n  Electric: 'fas fa-lg fa-bolt has-text-yellow',\n}\n\n\nexport class MoveCard extends PureComponent<Props> {\n\n  render() {\n    const { move, level } = this.props\n    return (\n      <Card>\n        <Card.Header className=\"has-background-primary\">\n          <Card.Header.Title>{move.name}</Card.Header.Title>\n          <Card.Header.Icon>\n            LV. {level}\n          </Card.Header.Icon>\n        </Card.Header>\n        <Card.Content>\n          <Content>\n            <Icon>\n              <i className={AttrMap[move.attribute]}/>\n            </Icon>\n            <span>{move.description}</span>\n          </Content>\n        </Card.Content>\n        <Card.Footer className=\"is-size-7\">\n          <Card.Footer.Item >\n            <strong style={{paddingRight: 5}}>Power: </strong> {move.power}\n          </Card.Footer.Item>\n          <Card.Footer.Item>\n            <strong style={{paddingRight: 5}}>Cost: </strong> {move.sp_cost}\n          </Card.Footer.Item>\n          <Card.Footer.Item>\n            <strong style={{paddingRight: 5}}>Inherit: </strong> {move.inheritable}\n          </Card.Footer.Item>\n        </Card.Footer>\n      </Card>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { DigimonCard } from '../../components/DigimonCard'\nimport { MoveCard } from '../../components/MoveCard'\nimport { Media, Box, Card, Content, Table } from 'bulma-styled-components'\nimport { db } from '../../Data'\nimport { Digimon as IDigimon } from '../../Data/Objects'\n\ntype State = {\n  digimon?: IDigimon,\n  stats?: string\n}\n\ntype Props = {\n  match: {\n    params: {\n      id: string\n    }\n  }\n}\n\n\nexport class Digimon extends Component<Props,State> {\n  state: State = {}\n\n  async componentDidMount() {\n    const digimon = await db.digimon.get(parseInt(this.props.match.params.id))\n    if (digimon) {\n      digimon.join().then(() => {\n        this.setState({ digimon })\n      })\n    }\n    this.setState({ digimon })\n  }\n\n  async componentWillReceiveProps(props: Props) {\n    if (this.props.match.params.id === props.match.params.id) return\n    const digimon = await db.digimon.get(parseInt(props.match.params.id))\n    if (digimon) {\n      digimon.join().then(() => {\n        this.setState({ digimon })\n      })\n    }\n    this.setState({ digimon })\n  }\n\n  changeStat(level: string) {\n    return () => this.setState({ stats: this.state.stats === level ? undefined : level })\n  }\n\n  render() {\n    const { digimon, stats } = this.state\n    if (!digimon) return null\n    return (\n      <div>\n        <Card>\n          <Card.Header className=\"has-background-primary\">\n            <Card.Header.Title>\n              {digimon.name}\n            </Card.Header.Title>\n            <Card.Header.Icon>\n              {digimon.stage}\n            </Card.Header.Icon>\n          </Card.Header>\n          <Card.Content>\n            <Media>\n              <Media.Left as=\"figure\">\n                <DigimonCard\n                  nameless\n                  digimon={digimon}\n                />\n              </Media.Left>\n              <Media.Content>\n                <Content>\n                  <p>\n                    <strong>Type: </strong> {digimon.type}\n                    <br/>\n                    <strong>Attribute: </strong> {digimon.attribute}\n                    <br/>\n                    <strong>Memory: </strong> {digimon.memory}\n                    <br/>\n                    <strong>Slots: </strong> {digimon.slots}\n                  </p>\n                </Content>\n              </Media.Content>\n            </Media>\n            {digimon.supportSkill && (\n              <Content>\n                <span style={{ textDecorationLine: 'underline' }}>\n                  <strong>Support Skill: </strong> {digimon.supportSkill.name}\n                </span>\n                <br/>\n                {digimon.supportSkill.description}\n              </Content>\n            )}\n          </Card.Content>\n          <Card.Footer>\n            <Card.Footer.Item as=\"a\" onClick={this.changeStat('01')}>LV. 01</Card.Footer.Item>\n            <Card.Footer.Item as=\"a\" onClick={this.changeStat('50')}>LV. 50</Card.Footer.Item>\n            <Card.Footer.Item as=\"a\" onClick={this.changeStat('99')}>LV. 99</Card.Footer.Item>\n          </Card.Footer>\n        </Card>\n        {stats && (\n          <Card>\n            <Card.Content className=\"is-paddingless\">\n              <Table className=\"is-bordered is-fullwidth is-size-7\">\n                <thead>\n                  <tr>\n                    <th>HP</th>\n                    <th>SP</th>\n                    <th>ATK</th>\n                    <th>DEF</th>\n                    <th>INT</th>\n                    <th>SPD</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{digimon.stats[stats].hp}</td>\n                    <td>{digimon.stats[stats].sp}</td>\n                    <td>{digimon.stats[stats].atk}</td>\n                    <td>{digimon.stats[stats].def}</td>\n                    <td>{digimon.stats[stats].int}</td>\n                    <td>{digimon.stats[stats].spd}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Card.Content>\n          </Card>\n        )}\n        <br/>\n        <Box className=\"is-paddingless is-clipped\">\n          <Table className=\"is-bordered is-fullwidth\">\n            <thead className=\"has-background-primary\">\n              <tr>\n                <th>Digivolves From</th>\n                <th>Level</th>\n                <th>Requires</th>\n              </tr>\n            </thead>\n            <tbody>\n              {digimon.digivolveFrom && digimon.digivolveFrom.map((data) => (\n                <tr key={data.digimon.id}>\n                  <td>\n                    <DigimonCard link digimon={data.digimon}/>\n                  </td>\n                  <td>{data.level}</td>\n                  <td>{data.require}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        <Box className=\"is-paddingless is-clipped\">\n          <Table className=\"is-bordered is-fullwidth\">\n            <thead className=\"has-background-primary\">\n              <tr>\n                <th>Digivolves To</th>\n                <th>Level</th>\n                <th>Requires</th>\n              </tr>\n            </thead>\n            <tbody>\n              {digimon.digivolveTo && digimon.digivolveTo.map((data) => (\n                <tr key={data.digimon.id}>\n                  <td>\n                    <DigimonCard link digimon={data.digimon}/>\n                  </td>\n                  <td>{data.level}</td>\n                  <td>{data.require}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        {digimon.moves && digimon.moves.map((data) => (\n          <MoveCard key={data.move.id} move={data.move} level={data.level}/>\n        ))}\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { Container, Section } from 'bulma-styled-components'\nimport { Home } from './Home'\nimport { Digimon } from './Digimon'\n\nexport class Routes extends Component {\n  render() {\n    return (\n      <Section>\n        <Container>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/digimon/:id\" exact component={Digimon}/>\n        </Container>\n      </Section>\n    )\n  }\n}","import React from 'react'\nimport { Navbar } from 'bulma-styled-components'\n\n\ntype Props = {\n\n}\ntype State = {\n  menu: boolean\n}\nexport class Header extends React.Component<Props, State> {\n  state: State = {\n    menu: false\n  }\n  render() {\n    const { menu } = this.state\n    return (\n      <Navbar className=\"is-fixed-top is-primary\">\n        <Navbar.Brand>\n          <Navbar.Item>DigiDB</Navbar.Item>\n          <Navbar.Burger onClick={() => this.setState({ menu: !menu })} className={menu ? 'is-active' : undefined} >\n            <span/>\n            <span/>\n            <span/>\n          </Navbar.Burger>\n        </Navbar.Brand>\n        <Navbar.Menu className={menu ? 'is-active' : undefined}>\n          <Navbar.Start>\n            <Navbar.Item as=\"a\" href=\"#/\">Home</Navbar.Item>\n          </Navbar.Start>\n        </Navbar.Menu>\n      </Navbar>\n    )\n  }\n}","\ntype Subscriber = (text: string) => void\n\nexport class NotificationService {\n  private static subscribers: { [id: number]:Subscriber } = {}\n  private static nextID: number = 0\n\n  static async notify(text: string) {\n    Object.values(this.subscribers).forEach((sub) => sub(text))\n  }\n\n  static subscribe(sub: Subscriber) {\n    const id = this.nextID++\n    this.subscribers[id] = sub\n    return () => {\n      delete this.subscribers[id]\n    }\n  }\n\n}","import React from 'react'\nimport { Notification } from 'bulma-styled-components'\nimport { NotificationService } from '../services/Notification';\n\ntype State = {\n  notes:  string[]\n}\n\nexport class NotificationBay extends React.PureComponent {\n  state: State = {\n    notes: []\n  }\n\n  destroy = () => {\n    this.setState({\n      notes: this.state.notes.slice(0, this.state.notes.length - 1)\n    })\n  }\n\n  componentDidMount() {\n    NotificationService.subscribe((text) => {\n      this.setState({\n        notes: this.state.notes.concat(text)\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'fixed', right: 10, left: 10, bottom: 10 }}>\n        {this.state.notes.map((note, i) => (\n          <Notification\n            key={i}\n            className=\"is-info is-size-7\"\n            onClick={this.destroy}\n          >{note}</Notification>\n        ))}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { BulmaStyledTheme } from 'bulma-styled-components'\nimport { HashRouter } from \"react-router-dom\";\nimport { Routes } from './routes'\nimport { Header } from './components/Header'\nimport { NotificationBay } from './components/NotificationBay'\nimport { Digimon } from './Data/Objects';\n\ntype State = {\n  digimon: Digimon[]\n}\n\n\nclass App extends Component<{}, State> {\n  render() {\n    return (\n      <BulmaStyledTheme overrides={{ primary: '#0A5' }}>\n        <HashRouter>\n          <div className=\"has-background-grey-light\" style={{ minHeight: '100vh' }}>\n            <Header />\n            <Routes/>\n            <NotificationBay />\n          </div>\n        </HashRouter>\n      </BulmaStyledTheme>\n    );\n  }\n}\n\nconst body = document.querySelector('body')\nbody && body.classList.add('has-navbar-fixed-top')\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nimport { NotificationService } from './services/Notification'\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              NotificationService.notify(\n                'New content is available and will be used when all tabs for this page are closed!'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              NotificationService.notify(\n                'Digi DB is now ready for offline use!'\n              )\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      NotificationService.notify(\n        'App is running in offline mode.'\n      )\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}