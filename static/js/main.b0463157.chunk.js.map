{"version":3,"sources":["components/DigimonCard.tsx","Data/Objects.ts","Data/Database.ts","Data/index.ts","Data/Populate.ts","routes/Home/index.tsx","components/MoveCard.tsx","routes/Digimon/index.tsx","routes/Moves/index.tsx","components/SupportCard.tsx","routes/Supports/index.tsx","routes/index.tsx","components/Header.tsx","services/Notification.ts","components/NotificationBay.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["DigimonCard","_PureComponent","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this$props","props","digimon","link","size","nameless","react_default","a","createElement","dist","as","undefined","href","concat","id","className","style","margin","maxWidth","src","image","alt","position","left","right","bottom","backgroundColor","textOverflow","overflow","whiteSpace","name","PureComponent","defaultProps","Digimon","stage","type","attribute","memory","slots","sprite","favorite","support_skill_id","digivolveTo","digivolveFrom","moves","supportSkill","stats","assign","_toggleFavorite","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","abrupt","db","update","stop","_join","_callee2","_ref","_ref2","support_skill","digivolveToData","digivolveFromData","movelearns","_ref3","_ref4","moveMap","digivolveToMap","digivolveFromMap","_context2","Promise","all","supports","get","digivolve","where","equals","toArray","movelearn","sortBy","sent","slicedToArray","anyOf","map","_ref5","move_id","_ref6","to","_ref7","from","reduce","move","level","digi","require","ret","Move","sp_cost","power","inheritable","description","Support","_Dexie","Database","_this","call","autoOpen","version","stores","table","mapToClass","assertThisInitialized","on","console","log","bulkPut","data","e","Dexie","Home","_Component","_getPrototypeOf2","_len","length","args","Array","_key","state","favorites","onChange","setState","target","toLowerCase","toggleFavorite","filter","_this$state","includes","_componentDidMount","checked","display","flexDirection","flexWrap","justifyContent","DigimonCard_DigimonCard","Component","AttrMap","Neutral","Plant","Light","Water","Wind","Dark","Earth","Fire","Electric","MoveCard","Header","Title","Icon","Content","Footer","Item","paddingRight","_this2","parseInt","match","params","join","then","_componentWillReceiveProps","_callee3","_this3","_context3","_x","_this4","Left","textDecorationLine","onClick","changeStat","hp","sp","atk","def","int","spd","MoveCard_MoveCard","Moves","SupportCard","support","Supports","SupportCard_SupportCard","Routes","Switch","Route","path","exact","component","_React$Component","menu","Brand","Burger","Menu","Start","React","NotificationService","_notify","text","values","subscribers","forEach","sub","nextID","NotificationBay","_React$PureComponent","notes","destroy","slice","subscribe","note","i","App","overrides","primary","HashRouter","minHeight","Header_Header","routes_Routes","NotificationBay_NotificationBay","body","document","querySelector","classList","add","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","notify","onUpdate","onSuccess","catch","error","ReactDOM","render","app","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b0463157.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\nimport { Box, Image } from 'bulma-styled-components'\n\ntype Props = {\n  digimon: {\n    id: number,\n    name: string,\n    image: string,\n  },\n  size?: 16 | 24 | 32 | 48 | 64 | 96 | 128,\n  link?: boolean\n  nameless?: boolean\n}\n\nexport class DigimonCard extends PureComponent<Props> {\n  static defaultProps = {\n    size: 96\n  }\n  render() {\n    const { digimon, link, size, nameless } = this.props\n    return  (\n      <Box as={link ? 'a' : undefined} href={`#/digimon/${digimon.id}`} className=\"is-paddingless has-background-grey-lighter is-clipped\" style={{margin: 5, maxWidth: size }} >\n        <Image className={`is-${size}x${size}`}>\n          <img src={digimon.image} alt=\"digimon\"/>\n          {!nameless && (\n            <div style={{\n                position: 'absolute',\n                left: 0,\n                right: 0,\n                bottom: 0,\n                backgroundColor: 'rgba(70, 70, 70, .7)',\n                textOverflow: 'ellipsis',\n                overflow: 'hidden',\n                whiteSpace: 'nowrap',\n              }} className=\"has-text-white has-text-centered is-size-7\" >\n              {digimon.name}\n            </div>\n          )}\n        </Image>\n      </Box>\n    )\n  }\n}","import { db } from './'\n\n\nexport interface IDigimon {\n  id: number;\n  name: string;\n  stage: string;\n  type: string;\n  attribute: string;\n  memory: number;\n  slots: number;\n  image: string;\n  sprite: string;\n  favorite: boolean;\n  support_skill_id: number;\n  stats: {\n    [level: string]: IStats\n  };\n}\n\nexport class Digimon implements IDigimon {\n  id: number;\n  name: string;\n  stage: string;\n  type: string;\n  attribute: string;\n  memory: number;\n  slots: number;\n  image: string;\n  sprite: string;\n  favorite: boolean = false;\n  support_skill_id: number;\n  digivolveTo?: IDigivoleInfo[] = [];\n  digivolveFrom?: IDigivoleInfo[] = [];\n  moves?: IMoveInfo[];\n  supportSkill?: Support;\n  stats: {\n    [level: string]: IStats\n  };\n\n  constructor(digimon: IDigimon) {\n    Object.assign(this, digimon)\n  }\n\n  async toggleFavorite() {\n    this.favorite = !this.favorite\n    return db.digimon.update(this.id, { favorite: this.favorite })\n  }\n\n  async join() {\n    const [\n      support_skill,\n      digivolveToData,\n      digivolveFromData,\n      movelearns\n    ] = await Promise.all([\n      db.supports.get(this.support_skill_id),\n      db.digivolve.where('from').equals(this.id).toArray(),\n      db.digivolve.where('to').equals(this.id).toArray(),\n      db.movelearn.where('digimon_id').equals(this.id).sortBy('level'),\n    ])\n    this.supportSkill = support_skill\n\n    const [\n      moves,\n      digivolveTo,\n      digivolveFrom\n    ] = await Promise.all([\n      db.moves.where('id').anyOf(movelearns.map(({ move_id }) => move_id)).toArray(),\n      db.digimon.where('id').anyOf(digivolveToData.map(({ to }) => to)).toArray(),\n      db.digimon.where('id').anyOf(digivolveFromData.map(({ from }) => from)).toArray(),\n    ])\n\n    const moveMap = moves.reduce((map, move) => {\n      map[move.id] = move\n      return map\n    }, {} as { [move_id: string]: Move })\n    this.moves = movelearns.map((movelearn) => {\n      return {\n        move: moveMap[movelearn.move_id],\n        level: movelearn.level\n      }\n    })\n\n    const digivolveToMap = digivolveToData.reduce((map, digi) => {\n      map[digi.to] = {\n        level: digi.level,\n        require: digi.require,\n      }\n      return map\n    }, {} as { [move_id: string]: {level:number, require:string} })\n    this.digivolveTo = digivolveTo.map((digi) => {\n      const ret = digivolveToMap[digi.id]\n      return {\n        level: ret.level,\n        require: ret.require,\n        digimon: digi\n      }\n    })\n\n    const digivolveFromMap = digivolveFromData.reduce((map, digi) => {\n      map[digi.from] = {\n        level: digi.level,\n        require: digi.require,\n      }\n      return map\n    }, {} as { [move_id: string]: {level:number, require:string} })\n    this.digivolveFrom = digivolveFrom.map((digi) => {\n      const ret = digivolveFromMap[digi.id]\n      return {\n        level: ret.level,\n        require: ret.require,\n        digimon: digi\n      }\n    })\n  }\n}\n\ninterface IDigivoleInfo {\n  level: number,\n  require: string,\n  digimon: Digimon,\n}\n\ninterface IMoveInfo {\n  level: number,\n  move: Move,\n}\n\nexport interface IStats {\n  hp: number,\n  sp: number,\n  atk: number,\n  def: number,\n  int: number,\n  spd: number\n}\n\nexport class Move {\n  id: number;\n  name: string;\n  sp_cost: number;\n  type: string;\n  power: number;\n  attribute: string;\n  inheritable: string;\n  description: string;\n}\n\nexport class Support {\n  id: number;\n  name: string;\n  description: string;\n}\n\nexport interface IMoveLearn {\n  digimon_id: number,\n  level: number,\n  move_id: number\n}\n\nexport interface IDigivolve {\n  from: number,\n  to: number,\n  level: number,\n  require: string\n}\n","import Dexie from 'dexie'\nimport { Digimon, Move, Support, IMoveLearn, IDigivolve } from './Objects'\nimport { populate } from './Populate';\n\n\nexport class Database extends Dexie {\n  digimon: Dexie.Table<Digimon, number>\n  moves: Dexie.Table<Move, number>\n  supports: Dexie.Table<Support, number>\n  movelearn: Dexie.Table<IMoveLearn, number>\n  digivolve: Dexie.Table<IDigivolve, number>\n\n  constructor() {\n    super('DigiDB', { autoOpen: true })\n    this.version(1).stores({\n      digimon: `id,&name,stage,type,attribute,memory,slots,support_skill_id`,\n      moves: 'id, name, sp_cost, type, power, attribute, inheritable, description',\n      supports: 'id, name, description',\n      movelearn: '++, digimon_id, move_id, &[digimon_id+move_id], level',\n      digivolve: '++, from, to, [from+to], level',\n    })\n    this.version(2).stores({\n      digimon: `id,&name,stage,type,attribute,memory,slots,support_skill_id,favorite`,\n      // ,stats.01.hp,stats.01.sp,stats.01.atk,stats.01.def,stats.01.int,stats.01.spd,stats.99.hp,stats.99.sp,stats.99.atk,stats.99.def,stats.99.int,stats.99.spd,stats.50.hp,stats.50.sp,stats.50.atk,stats.50.def,stats.50.int,stats.50.spd\n    })\n\n    this.table('digimon').mapToClass(Digimon)\n    this.table('moves').mapToClass(Move)\n    this.table('supports').mapToClass(Support)\n\n    this.digimon = this.table('digimon')\n    this.moves = this.table('moves')\n    this.supports = this.table('supports')\n    this.movelearn = this.table('movelearn')\n    this.digivolve = this.table('digivolve')\n\n    populate(this)\n  }\n\n}","import { Database } from './Database'\n\nexport const db = new Database()","import { Database } from './Database'\nimport data from './data.json'\nimport { Digimon, IDigimon } from './Objects';\n\nexport function populate(db: Database) {\n  db.on('populate', () => {\n    console.log('populating')\n    try {\n      db.digimon.bulkPut(data.digimon.map((digi) => new Digimon(digi as unknown as IDigimon)))\n      db.moves.bulkPut(data.moves)\n      db.supports.bulkPut(data.supports)\n      db.movelearn.bulkPut(data.movelearn)\n      db.digivolve.bulkPut(data.digivolve)\n    } catch (e) {\n      console.log(e)\n    }\n    console.log('population done')\n  })\n}\n","import React, { Component, FormEvent } from \"react\";\nimport { Input, Checkbox } from 'bulma-styled-components'\nimport { DigimonCard } from '../../components/DigimonCard'\nimport { db } from '../../Data'\nimport { Digimon } from '../../Data/Objects'\n\ntype State = {\n  digimon: Digimon[]\n  name: string\n  favorites: boolean\n}\n\n\nexport class Home extends Component<{},State> {\n  state: State = {\n    digimon: [],\n    name: '',\n    favorites: false\n  }\n\n  async componentDidMount() {\n    const digimon = await db.digimon.toArray()\n    this.setState({ digimon })\n  }\n\n  onChange = (e: any) => {\n    this.setState({ name: e.target.value.toLowerCase() })\n  }\n\n  toggleFavorite = () => {\n    this.setState({ favorites: !this.state.favorites })\n  }\n\n  filter = (digimon: Digimon) => {\n    const { name, favorites } = this.state\n    if (favorites && !digimon.favorite) return false\n    if (name && !digimon.name.toLowerCase().includes(name)) return false\n    return true\n  }\n\n  render() {\n    const { favorites } = this.state\n    return (\n      <div>\n        <Input onChange={this.onChange}/>\n        <Checkbox>\n          <input type=\"checkbox\" checked={favorites} onChange={this.toggleFavorite}/>\n          Favorites\n        </Checkbox>\n        <div style={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', justifyContent: 'center' }}>\n          {this.state.digimon.filter(this.filter).map((digimon) => (\n            <DigimonCard\n              link\n              key={digimon.id}\n              digimon={digimon}\n            />\n          ))}\n        </div>\n      </div>\n    )\n  }\n}","import React, { PureComponent } from \"react\";\nimport {\n  Card,\n  Content,\n  Icon,\n} from 'bulma-styled-components'\nimport { Move } from '../Data/Objects'\n\ntype Props = {\n  move: Move,\n  level?: number\n}\n\nconst AttrMap: { [type: string]: string } = {\n  Neutral: 'fas fa-lg fa-minus has-text-grey',\n  Plant: 'fas fa-lg fa-leaf has-text-green',\n  Light: 'fas fa-lg fa-sun has-text-yellow',\n  Water: 'fas fa-lg fa-tint has-text-info',\n  Wind: 'fas fa-lg fa-wind has-text-light',\n  Dark: 'fas fa-lg fa-moon has-text-dark',\n  Earth: 'fas fa-lg fa-mountain has-text-grey',\n  Fire: 'fas fa-lg fa-fire has-text-red',\n  Electric: 'fas fa-lg fa-bolt has-text-yellow',\n}\n\n\nexport class MoveCard extends PureComponent<Props> {\n\n  render() {\n    const { move, level } = this.props\n    return (\n      <Card>\n        <Card.Header className=\"has-background-primary\">\n          <Card.Header.Title>{move.name}</Card.Header.Title>\n          <Card.Header.Icon>\n            LV. {level}\n          </Card.Header.Icon>\n        </Card.Header>\n        <Card.Content>\n          <Content>\n            <Icon>\n              <i className={AttrMap[move.attribute]}/>\n            </Icon>\n            <span>{move.description}</span>\n          </Content>\n        </Card.Content>\n        <Card.Footer className=\"is-size-7\">\n          <Card.Footer.Item >\n            <strong style={{paddingRight: 5}}>Power: </strong> {move.power}\n          </Card.Footer.Item>\n          <Card.Footer.Item>\n            <strong style={{paddingRight: 5}}>Cost: </strong> {move.sp_cost}\n          </Card.Footer.Item>\n          <Card.Footer.Item>\n            <strong style={{paddingRight: 5}}>Inherit: </strong> {move.inheritable}\n          </Card.Footer.Item>\n        </Card.Footer>\n      </Card>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { DigimonCard } from '../../components/DigimonCard'\nimport { MoveCard } from '../../components/MoveCard'\nimport { Media, Box, Card, Content, Table, Checkbox } from 'bulma-styled-components'\nimport { db } from '../../Data'\nimport { Digimon as IDigimon } from '../../Data/Objects'\n\ntype State = {\n  digimon?: IDigimon,\n  stats?: string\n}\n\ntype Props = {\n  match: {\n    params: {\n      id: string\n    }\n  }\n}\n\n\nexport class Digimon extends Component<Props,State> {\n  state: State = {}\n\n  async componentDidMount() {\n    const digimon = await db.digimon.get(parseInt(this.props.match.params.id))\n    if (digimon) {\n      digimon.join().then(() => {\n        this.setState({ digimon })\n      })\n    }\n    this.setState({ digimon })\n  }\n\n  async componentWillReceiveProps(props: Props) {\n    if (this.props.match.params.id === props.match.params.id) return\n    const digimon = await db.digimon.get(parseInt(props.match.params.id))\n    if (digimon) {\n      digimon.join().then(() => {\n        this.setState({ digimon })\n      })\n    }\n    this.setState({ digimon })\n  }\n\n  favorite = async () => {\n    const { digimon } = this.state\n    if (!digimon) return\n    await digimon.toggleFavorite()\n    this.setState({ digimon })\n\n  }\n  changeStat(level: string) {\n    return () => this.setState({ stats: this.state.stats === level ? undefined : level })\n  }\n\n  render() {\n    const { digimon, stats } = this.state\n    if (!digimon) return null\n    return (\n      <div>\n        <Card>\n          <Card.Header className=\"has-background-primary\">\n            <Card.Header.Title>\n              {digimon.name}\n            </Card.Header.Title>\n            <Card.Header.Icon>\n              {digimon.stage}\n            </Card.Header.Icon>\n          </Card.Header>\n          <Card.Content>\n            <Media>\n              <Media.Left as=\"figure\">\n                <DigimonCard\n                  nameless\n                  digimon={digimon}\n                />\n              </Media.Left>\n              <Media.Content>\n                <Content>\n                  <Checkbox>\n                    <input type=\"checkbox\" onChange={this.favorite} checked={digimon.favorite}/>\n                    Favorite\n                  </Checkbox>\n                  <p>\n                    <strong>Type: </strong> {digimon.type}\n                    <br/>\n                    <strong>Attribute: </strong> {digimon.attribute}\n                    <br/>\n                    <strong>Memory: </strong> {digimon.memory}\n                    <br/>\n                    <strong>Slots: </strong> {digimon.slots}\n                  </p>\n                </Content>\n              </Media.Content>\n            </Media>\n            {digimon.supportSkill && (\n              <Content>\n                <span style={{ textDecorationLine: 'underline' }}>\n                  <strong>Support Skill: </strong> {digimon.supportSkill.name}\n                </span>\n                <br/>\n                {digimon.supportSkill.description}\n              </Content>\n            )}\n          </Card.Content>\n          <Card.Footer>\n            <Card.Footer.Item as=\"a\" onClick={this.changeStat('01')}>LV. 01</Card.Footer.Item>\n            <Card.Footer.Item as=\"a\" onClick={this.changeStat('50')}>LV. 50</Card.Footer.Item>\n            <Card.Footer.Item as=\"a\" onClick={this.changeStat('99')}>LV. 99</Card.Footer.Item>\n          </Card.Footer>\n        </Card>\n        {stats && (\n          <Card>\n            <Card.Content className=\"is-paddingless\">\n              <Table className=\"is-bordered is-fullwidth is-size-7\">\n                <thead>\n                  <tr>\n                    <th>HP</th>\n                    <th>SP</th>\n                    <th>ATK</th>\n                    <th>DEF</th>\n                    <th>INT</th>\n                    <th>SPD</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>{digimon.stats[stats].hp}</td>\n                    <td>{digimon.stats[stats].sp}</td>\n                    <td>{digimon.stats[stats].atk}</td>\n                    <td>{digimon.stats[stats].def}</td>\n                    <td>{digimon.stats[stats].int}</td>\n                    <td>{digimon.stats[stats].spd}</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </Card.Content>\n          </Card>\n        )}\n        <br/>\n        <Box className=\"is-paddingless is-clipped\">\n          <Table className=\"is-bordered is-fullwidth\">\n            <thead className=\"has-background-primary\">\n              <tr>\n                <th>Digivolves From</th>\n                <th>Level</th>\n                <th>Requires</th>\n              </tr>\n            </thead>\n            <tbody>\n              {digimon.digivolveFrom && digimon.digivolveFrom.map((data) => (\n                <tr key={data.digimon.id}>\n                  <td>\n                    <DigimonCard link digimon={data.digimon}/>\n                  </td>\n                  <td>{data.level}</td>\n                  <td>{data.require}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        <Box className=\"is-paddingless is-clipped\">\n          <Table className=\"is-bordered is-fullwidth\">\n            <thead className=\"has-background-primary\">\n              <tr>\n                <th>Digivolves To</th>\n                <th>Level</th>\n                <th>Requires</th>\n              </tr>\n            </thead>\n            <tbody>\n              {digimon.digivolveTo && digimon.digivolveTo.map((data) => (\n                <tr key={data.digimon.id}>\n                  <td>\n                    <DigimonCard link digimon={data.digimon}/>\n                  </td>\n                  <td>{data.level}</td>\n                  <td>{data.require}</td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Box>\n        {digimon.moves && digimon.moves.map((data) => (\n          <MoveCard key={data.move.id} move={data.move} level={data.level}/>\n        ))}\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Input } from 'bulma-styled-components'\nimport { MoveCard } from '../../components/MoveCard'\nimport { db } from '../../Data'\nimport { Move } from '../../Data/Objects'\n\ntype State = {\n  moves: Move[]\n  name: string\n}\n\n\nexport class Moves extends Component<{},State> {\n  state: State = {\n    moves: [],\n    name: ''\n  }\n\n  async componentDidMount() {\n    const moves = await db.moves.toArray()\n    this.setState({ moves })\n  }\n\n  onChange = (e: any) => {\n    this.setState({ name: e.target.value.toLowerCase() })\n  }\n\n  render() {\n    const { name } = this.state\n    return (\n      <div>\n        <Input onChange={this.onChange}/>\n        <br/>\n        <br/>\n        <div >\n          {this.state.moves.filter((move) => name ? move.name.toLowerCase().includes(name) : true).map((move) => (\n            <div key={move.id}>\n              <MoveCard\n                move={move}\n              />\n              <br/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}","import React, { PureComponent } from \"react\";\nimport {\n  Card,\n  Content,\n  Icon,\n} from 'bulma-styled-components'\nimport { Support } from '../Data/Objects'\n\ntype Props = {\n  support: Support,\n}\n\nconst AttrMap: { [type: string]: string } = {\n  Neutral: 'fas fa-lg fa-minus has-text-grey',\n  Plant: 'fas fa-lg fa-leaf has-text-green',\n  Light: 'fas fa-lg fa-sun has-text-yellow',\n  Water: 'fas fa-lg fa-tint has-text-info',\n  Wind: 'fas fa-lg fa-wind has-text-light',\n  Dark: 'fas fa-lg fa-moon has-text-dark',\n  Earth: 'fas fa-lg fa-mountain has-text-grey',\n  Fire: 'fas fa-lg fa-fire has-text-red',\n  Electric: 'fas fa-lg fa-bolt has-text-yellow',\n}\n\n\nexport class SupportCard extends PureComponent<Props> {\n\n  render() {\n    const { support } = this.props\n    return (\n      <Card>\n        <Card.Header className=\"has-background-primary\">\n          <Card.Header.Title>{support.name}</Card.Header.Title>\n          <Card.Header.Icon>\n            {/* LV. {level} */}\n          </Card.Header.Icon>\n        </Card.Header>\n        <Card.Content>\n          <Content>\n            <span>{support.description}</span>\n          </Content>\n        </Card.Content>\n      </Card>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Input } from 'bulma-styled-components'\nimport { SupportCard } from '../../components/SupportCard'\nimport { db } from '../../Data'\nimport { Support } from '../../Data/Objects'\n\ntype State = {\n  supports: Support[]\n  name: string\n}\n\n\nexport class Supports extends Component<{},State> {\n  state: State = {\n    supports: [],\n    name: ''\n  }\n\n  async componentDidMount() {\n    const supports = await db.supports.toArray()\n    this.setState({ supports })\n  }\n\n  onChange = (e: any) => {\n    this.setState({ name: e.target.value.toLowerCase() })\n  }\n\n  render() {\n    const { name } = this.state\n    return (\n      <div>\n        <Input onChange={this.onChange}/>\n        <br/>\n        <br/>\n        <div >\n          {this.state.supports.filter((support) => name ? support.name.toLowerCase().includes(name) : true).map((support) => (\n            <div key={support.id}>\n              <SupportCard\n                support={support}\n              />\n              <br/>\n            </div>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}","import React, { Component } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { Container, Section } from 'bulma-styled-components'\nimport { Home } from './Home'\nimport { Digimon } from './Digimon'\nimport { Moves } from './Moves'\nimport { Supports } from './Supports'\n\nexport class Routes extends Component {\n  render() {\n    return (\n      <Section>\n        <Container>\n          <Switch>\n            <Route path=\"/\" exact component={Home}/>\n            <Route path=\"/moves\" component={Moves}/>\n            <Route path=\"/supports\" component={Supports}/>\n            <Route path=\"/digimon/:id\" component={Digimon}/>\n          </Switch>\n        </Container>\n      </Section>\n    )\n  }\n}","import React from 'react'\nimport { Navbar } from 'bulma-styled-components'\n\n\ntype Props = {\n\n}\ntype State = {\n  menu: boolean\n}\nexport class Header extends React.Component<Props, State> {\n  state: State = {\n    menu: false\n  }\n  render() {\n    const { menu } = this.state\n    return (\n      <Navbar className=\"is-fixed-top is-primary\">\n        <Navbar.Brand>\n          <Navbar.Item>DigiDB</Navbar.Item>\n          <Navbar.Burger onClick={() => this.setState({ menu: !menu })} className={menu ? 'is-active' : undefined} >\n            <span/>\n            <span/>\n            <span/>\n          </Navbar.Burger>\n        </Navbar.Brand>\n        <Navbar.Menu className={menu ? 'is-active' : undefined}>\n          <Navbar.Start>\n            <Navbar.Item as=\"a\" href=\"#/\">Digimon</Navbar.Item>\n            <Navbar.Item as=\"a\" href=\"#/moves\">Moves</Navbar.Item>\n            <Navbar.Item as=\"a\" href=\"#/supports\">Support Skills</Navbar.Item>\n          </Navbar.Start>\n        </Navbar.Menu>\n      </Navbar>\n    )\n  }\n}","\ntype Subscriber = (text: string) => void\n\nexport class NotificationService {\n  private static subscribers: { [id: number]:Subscriber } = {}\n  private static nextID: number = 0\n\n  static async notify(text: string) {\n    Object.values(this.subscribers).forEach((sub) => sub(text))\n  }\n\n  static subscribe(sub: Subscriber) {\n    const id = this.nextID++\n    this.subscribers[id] = sub\n    return () => {\n      delete this.subscribers[id]\n    }\n  }\n\n}","import React from 'react'\nimport { Notification } from 'bulma-styled-components'\nimport { NotificationService } from '../services/Notification';\n\ntype State = {\n  notes:  string[]\n}\n\nexport class NotificationBay extends React.PureComponent {\n  state: State = {\n    notes: []\n  }\n\n  destroy = () => {\n    this.setState({\n      notes: this.state.notes.slice(0, this.state.notes.length - 1)\n    })\n  }\n\n  componentDidMount() {\n    NotificationService.subscribe((text) => {\n      this.setState({\n        notes: this.state.notes.concat(text)\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div style={{ position: 'fixed', right: 10, left: 10, bottom: 10 }}>\n        {this.state.notes.map((note, i) => (\n          <Notification\n            key={i}\n            className=\"is-info is-size-7\"\n            onClick={this.destroy}\n          >{note}</Notification>\n        ))}\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport { BulmaStyledTheme } from 'bulma-styled-components'\nimport { HashRouter } from \"react-router-dom\";\nimport { Routes } from './routes'\nimport { Header } from './components/Header'\nimport { NotificationBay } from './components/NotificationBay'\nimport { Digimon } from './Data/Objects';\n\ntype State = {\n  digimon: Digimon[]\n}\n\n\nclass App extends Component<{}, State> {\n  render() {\n    return (\n      <BulmaStyledTheme overrides={{ primary: '#0A5' }}>\n        <HashRouter>\n          <div className=\"has-background-grey-light\" style={{ minHeight: '100vh' }}>\n            <Header />\n            <Routes/>\n            <NotificationBay />\n          </div>\n        </HashRouter>\n      </BulmaStyledTheme>\n    );\n  }\n}\n\nconst body = document.querySelector('body')\nbody && body.classList.add('has-navbar-fixed-top')\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\nimport { NotificationService } from './services/Notification'\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              NotificationService.notify(\n                'New content is available and will be used when all tabs for this page are closed!'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              NotificationService.notify(\n                'Digi DB is now ready for offline use!'\n              )\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      NotificationService.notify(\n        'App is running in offline mode.'\n      )\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}